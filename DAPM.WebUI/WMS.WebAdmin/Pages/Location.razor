@page "/location"
@using System.Net.Http.Json
@using WMS.WebAdmin.Dialog
@using WMS.WebAdmin.Model
@inject HttpClient httpClient
@inject IDialogService DialogService

<div class="pa-10">
    <MudPaper Class="pa-5" Outlined = "true">
        <h2>Location</h2>
    </MudPaper>
    <MudPaper Class="pa-5" Outlined ="true">
        <div class="pb-5 align-start d-flex">
            <MudButton OnClick="OpenDialogAsync" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircle" Color="Color.Success">Add Location</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircle" Color="Color.Success">Add Location</MudButton>
        </div>
        <div class="pb-5 align-start d-flex">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircle" Color="Color.Success">Add Location</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircle" Color="Color.Success">Add Location</MudButton>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircle" Color="Color.Success">Add Location</MudButton>
        </div>
        <MudDataGrid T="LocationDTO" Items="@Elements.Take(4)" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                     StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                     Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="Id" Editable="false" />
                <PropertyColumn Property="x => x.Name" Title="Name" />
                <PropertyColumn Property="x => x.ContactInf" Title="ContactInf" />                                
                 <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
                     <CellTemplate>
                         <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                     </CellTemplate>
                 </TemplateColumn>
             </Columns>
         </MudDataGrid>

    </MudPaper>

</div>
@code {
    private IEnumerable<LocationDTO> Elements = new List<LocationDTO>()
    {
        new LocationDTO(1, "Hanoi Office", "+84-123-456-789"),
        new LocationDTO(2, "Ho Chi Minh Branch", "+84-987-654-321"),
        new LocationDTO(3, "Da Nang Hub", "+84-345-678-901"),
        new LocationDTO(4, "Can Tho Center", "+84-234-567-890"),
        new LocationDTO(5, "Hai Phong Depot", "+84-567-890-123")
    };
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<LocationDTO>>("webapi/periodictable");
    }

    // events
    void StartedEditingItem(LocationDTO item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(LocationDTO item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(LocationDTO item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
        return DialogService.ShowAsync<Dialog_Account>("Them Tai Khoan", options);
    }
}
