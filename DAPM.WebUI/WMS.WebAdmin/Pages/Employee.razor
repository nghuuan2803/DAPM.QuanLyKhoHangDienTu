@page "/employee"
@using System.Net.Http.Json
@using WMS.WebAdmin.Dialog
@using WMS.WebAdmin.Model
@inject HttpClient httpClient
@inject IDialogService DialogService

<div class="pa-10">
    <MudPaper Class = "pa-5" Outlined="true">
        <h3>Nhan Vien</h3>
    </MudPaper>
    <MudPaper Class="pa-5" Outlined="true">
        <div class="pb-10 align-start d-flex">
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudSpacer></MudSpacer>
            <div>
                <MudButton OnClick="OpenDialogAsync" StartIcon="@Icons.Material.Filled.AlarmAdd" IconColor="Color.Warning" Style="background-color: aqua">Add Employee</MudButton>
                <MudIconButton Icon="@Icons.Material.Filled.RestartAlt" Color="Color.Primary"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary"></MudIconButton>
            </div>
        </div>
        
        <MudDataGrid T="EmployeeDTO" Items="@Elements.Take(4)" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                     StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                     Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
            <Columns>
                <PropertyColumn Property="x => x.Id" Editable="false" />
                <PropertyColumn Property="x => x.Name" />
                <PropertyColumn Property="x => x.Email" />
                <PropertyColumn Property="x => x.Noidung" />
                <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudPaper>
</div>




@code {
    private IEnumerable<EmployeeDTO> Elements = new List<EmployeeDTO>()
    {
        new EmployeeDTO ( 1, "Nguyen Van A", "nguyenvana@gmail.com", "Phản hồi về dịch vụ" ),
        new EmployeeDTO ( 2, "Tran Thi B", "tranthib@gmail.com", "Góp ý về sản phẩm" ),
        new EmployeeDTO ( 3, "Le Van C", "levanc@gmail.com", "Yêu cầu hỗ trợ kỹ thuật" ),
        new EmployeeDTO ( 4, "Pham Thi D", "phamthid@gmail.com", "Phàn nàn về thời gian giao hàng" ),
        new EmployeeDTO ( 5, "Hoang Van E", "hoangvane@gmail.com", "Đánh giá tích cực về dịch vụ khách hàng" )
    };
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;
    private string _searchString;
    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<EmployeeDTO>>("webapi/periodictable");
    }
    private Func<EmployeeDTO, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(_searchString))
               return true;

           if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
               return true;

           if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
               return true;

           // if ($"{x.Number} {x.Position} {x.Molar}".Contains(_searchString))
           //     return true;

           return false;
       };
    // events
    void StartedEditingItem(EmployeeDTO item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(EmployeeDTO item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(EmployeeDTO item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
        return DialogService.ShowAsync<Dialog_Employee>("Nhan Vien", options);
    }
}